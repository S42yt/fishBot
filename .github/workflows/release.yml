name: Build and Release fishBot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_ext: .exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_ext: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_ext: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Install Windows CGO dependencies
        if: runner.os == 'Windows'
        run: |
          choco install mingw -y --no-progress
          echo "Installed MinGW"

      - name: Install macOS dependencies (if needed)
        if: runner.os == 'macOS'
        run: |
          echo "No macOS dependencies currently needed for Robotgo."
      
      - name: Check Go and C compiler
        run: |
          go version
          which go
          echo "CGO_ENABLED=${CGO_ENABLED}"
          which gcc || echo "gcc not found"

      - name: Build binary
        shell: bash
        run: |
          mkdir -p dist
          BINARY_NAME="fishBot_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.binary_ext }}"
          echo "Building $BINARY_NAME"
          export GOOS=${{ matrix.goos }}
          export GOARCH=${{ matrix.goarch }}
          export CGO_ENABLED=1
          go build -v -ldflags="-s -w" -o "dist/$BINARY_NAME" .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: fishBot-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag and determine new version
        id: get_version
        run: |
          latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            new_version="v1.0.0"
          else
            current_version=$(echo "$latest_tag" | sed 's/v//')
            new_version=$(echo "$current_version" | awk -F. -v OFS=. '{ if (NF==1) $2=0; if (NF<=2) $3=0; $3+=1; print "v"$0 }')
          fi
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Update version in main.go
        run: |
          version="${{ steps.get_version.outputs.version }}"
          version_without_v="${version#v}"
          sed -i 's/^\(var version = \)"[^"]*"/\1"'"$version_without_v"'"/' main.go
          echo "Updated version in main.go to $version_without_v"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: fishBot ${{ steps.get_version.outputs.version }}
          body: |
            # fishBot Release ${{ steps.get_version.outputs.version }}
            
            Automated release from master branch.

            _Note: macOS and Windows binaries are unsigned. Grant execution permission if needed._
          files: dist/**/*.*
