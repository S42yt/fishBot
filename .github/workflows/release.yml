name: Build and Release fishBot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  determine-version:
    name: Determine Next Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag and determine new version
        id: get_version
        run: |
          # Finde den letzten Tag im Format v*.*.*, sortiere ihn und nimm den höchsten
          latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            new_version="v1.0.0"
          else
            # Entferne das 'v' Präfix
            current_version=$(echo "$latest_tag" | sed 's/v//')
            # Erhöhe die Patch-Version (die letzte Zahl) sicher mit awk
            new_version=$(echo "$current_version" | awk -F. -v OFS=. '{ if (NF==1) $2=0; if (NF<=2) $3=0; $3+=1; print "v"$0 }')
          fi
          echo "Determined new version: $new_version"
          echo "version=$new_version" >> "$GITHUB_OUTPUT"

  build:
    name: Build for ${{ matrix.goos }} (${{ matrix.goarch }})
    needs: determine-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_ext: .exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Linux CGO dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libx11-dev libxtst-dev libpng-dev

      - name: Install Windows CGO dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install mingw --yes


      - name: Build binary with injected version
        env:
          VERSION: ${{ needs.determine-version.outputs.new_version }}
        run: |
          BINARY_NAME="fishBot_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.binary_ext }}"
          
          # Baue die Binary und injiziere die Version via -ldflags
          # -X 'main.version=...' überschreibt die 'version' Variable im 'main' package.
          go build -v -ldflags="-X 'main.version=${VERSION}'" -o "$BINARY_NAME" .
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fishBot-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./${{ env.BINARY_NAME }} 

  release:
    name: Create GitHub Release
    needs: [build, determine-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files for debugging
        run: |
          echo "Downloaded files:"
          ls -R dist

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine-version.outputs.new_version }}
          name: fishBot ${{ needs.determine-version.outputs.new_version }}
          body: |
            # fishBot Release ${{ needs.determine-version.outputs.new_version }}
            
            Dies ist ein automatisches Release des fishBot. Lade die passende Binary für dein System herunter.
            
            **Hinweis:** Unter macOS und Windows musst du der Anwendung eventuell zusätzliche Berechtigungen erteilen, da sie nicht signiert ist.

            generate_release_notes: true

          files: dist/**/*