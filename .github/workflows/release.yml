name: Build and Release fishBot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build and Release fishBot
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1' 

      - name: Get latest tag and determine new version
        id: get_latest_tag
        run: |
          latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            echo "version=v1.0.0" >> $GITHUB_OUTPUT
          else
            current_version=$(echo $latest_tag | sed 's/v//') # Remove 'v' prefix
            major=$(echo $current_version | cut -d. -f1)
            minor=$(echo $current_version | cut -d. -f2)
            
            if [[ "$current_version" == *.*.* ]]; then # If format is X.Y.Z
              patch=$(echo $current_version | cut -d. -f3)
              new_patch=$((patch + 1))
              echo "version=v$major.$minor.$new_patch" >> $GITHUB_OUTPUT
            elif [[ "$current_version" == *.* ]]; then # If format is X.Y
              echo "version=v$major.$minor.0" >> $GITHUB_OUTPUT # Start patch at 0
            else # If format is X (e.g. v15) or unknown, treat as major and start minor.patch
              echo "version=v$major.0.0" >> $GITHUB_OUTPUT
            fi
          fi
          echo "Determined new version: ${{ steps.get_latest_tag.outputs.version }}"

      - name: Update version in main.go
        run: |
          version_without_v=$(echo "${{ steps.get_latest_tag.outputs.version }}" | sed 's/v//')
          # This updates the version string in: fmt.Println("--- Go Fishing Bot (v15 - Stabile UI-Erkennung) ---")
          # It replaces the existing version number (e.g., "v15") with the new semantic version (e.g., "v1.0.0").
          sed -i "s/--- Go Fishing Bot (v[^-]* - Stabile UI-Erkennung) ---/--- Go Fishing Bot (v${version_without_v} - Stabile UI-Erkennung) ---/g" main.go
          echo "Updated version in main.go to ${version_without_v}"

      - name: Build binaries
        run: |
          VERSION="${{ steps.get_latest_tag.outputs.version }}"
          # Windows
          GOOS=windows GOARCH=amd64 go build -v -o "fishBot_${VERSION}_windows_amd64.exe" .
          
          # macOS
          GOOS=darwin GOARCH=amd64 go build -v -o "fishBot_${VERSION}_darwin_amd64" .
          GOOS=darwin GOARCH=arm64 go build -v -o "fishBot_${VERSION}_darwin_arm64" .
          
          # Linux
          GOOS=linux GOARCH=amd64 go build -v -o "fishBot_${VERSION}_linux_amd64" .
          GOOS=linux GOARCH=arm64 go build -v -o "fishBot_${VERSION}_linux_arm64" .
          echo "Built binaries:"
          ls -l fishBot_*

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_latest_tag.outputs.version }}
          name: fishBot Release ${{ steps.get_latest_tag.outputs.version }}
          draft: true #
          generate_release_notes: true 
          body: |
            # fishBot ${{ steps.get_latest_tag.outputs.version }}
                        
            ## Download the appropriate binary for your platform:
            
            - Windows (amd64): fishBot_${{ steps.get_latest_tag.outputs.version }}_windows_amd64.exe
            - macOS (Intel amd64): fishBot_${{ steps.get_latest_tag.outputs.version }}_darwin_amd64
            - macOS (Apple Silicon arm64): fishBot_${{ steps.get_latest_tag.outputs.version }}_darwin_arm64
            - Linux (x86_64 amd64): fishBot_${{ steps.get_latest_tag.outputs.version }}_linux_amd64
            - Linux (ARM64 arm64): fishBot_${{ steps.get_latest_tag.outputs.version }}_linux_arm64
            
            ## Changes in this release:
            <!-- Review auto-generated notes or add your own -->
          files: |
            fishBot_${{ steps.get_latest_tag.outputs.version }}_windows_amd64.exe
            fishBot_${{ steps.get_latest_tag.outputs.version }}_darwin_amd64
            fishBot_${{ steps.get_latest_tag.outputs.version }}_darwin_arm64
            fishBot_${{ steps.get_latest_tag.outputs.version }}_linux_amd64
            fishBot_${{ steps.get_latest_tag.outputs.version }}_linux_arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}