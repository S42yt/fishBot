name: Build and Release fishBot

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            arch: amd64
            binary_ext: .exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            arch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1' 

      - name: Install Windows CGO dependencies
        if: runner.os == 'Windows'
        shell: bash
        run: |
          for i in 1 2 3; do
            choco install mingw -y --no-progress && break
            echo "choco install mingw failed. Retrying attempt $i..."
            sleep 5
          done
          # Ensure choco install succeeded
          if ! command -v gcc &> /dev/null; then
            echo "MinGW installation failed after multiple retries."
            exit 1
          fi
        # choco should add MinGW to the PATH for subsequent steps.

      - name: Check Go environment and C Compiler
        shell: bash
        run: |
          echo "--- Go Environment ---"
          go version
          echo "go env CC: $(go env CC)"
          echo "go env CXX: $(go env CXX)"
          echo "go env CGO_ENABLED: $(go env CGO_ENABLED)"
          echo "--- C Compiler Check (gcc) ---"
          if command -v gcc &> /dev/null; then
            echo "gcc found at: $(command -v gcc)"
            gcc --version
          else
            echo "gcc not found in PATH"
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              echo "Current PATH on Windows: $PATH"
            fi
          fi

      - name: Build binary
        run: |
          # The binary name for the artifact
          BINARY_NAME="fishBot_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.binary_ext }}"
          
          echo "Building $BINARY_NAME..."
          export CGO_ENABLED=1
          go build -v -o "$BINARY_NAME" .
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fishBot-${{ matrix.goos }}-${{ matrix.goarch }}
          path: fishBot_${{ matrix.goos }}_${{ matrix.goarch }}${{ matrix.binary_ext }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build 
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Get latest tag and determine new version
        id: get_version
        run: |
          latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            new_version="v1.0.0"
          else
            # Remove 'v' prefix for version manipulation
            current_version=$(echo "$latest_tag" | sed 's/v//')
            
            # Use awk for safer version incrementing
            new_version=$(echo "$current_version" | awk -F. -v OFS=. '{ if (NF==1) $2=0; if (NF<=2) $3=0; $3+=1; print "v"$0 }')
          fi
          echo "version=$new_version" >> "$GITHUB_OUTPUT"

      - name: Log the new version
        run: echo "New version is ${{ steps.get_version.outputs.version }}"

      - name: Update version in main.go
        run: |
          version_without_v=$(echo "${{ steps.get_version.outputs.version }}" | sed 's/v//')
          # Update the 'var version = "..."' line in main.go
          # This command finds the line starting with 'var version = "' and replaces the content within the quotes.
          sed -i 's/^\(var version = \)"[^"]*"/\1"'"$version_without_v"'"/' main.go
          echo "Updated 'var version' in main.go to \"$version_without_v\""

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      
      - name: List downloaded files
        run: |
          echo "Downloaded files:"
          ls -R dist

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Display Go environment
        shell: bash
        run: go env

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: fishBot ${{ steps.get_version.outputs.version }}
          body: |
            # fishBot Release ${{ steps.get_version.outputs.version }}
            
            This is an automated release of the fishBot. Download the appropriate binary for your system below.
            
            _Note: On macOS and Windows, you may need to grant permissions to run the application as it is not signed._
          draft: false 
          generate_release_notes: true
          files: dist/**/*